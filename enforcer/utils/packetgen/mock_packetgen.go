// Automatically generated by MockGen. DO NOT EDIT!
// Source: interfaces.go

package packetgen

import (
	gomock "github.com/golang/mock/gomock"
	gopacket "github.com/google/gopacket"
	layers "github.com/google/gopacket/layers"
)

// Mock of EthernetPacketManipulator interface
type MockEthernetPacketManipulator struct {
	ctrl     *gomock.Controller
	recorder *_MockEthernetPacketManipulatorRecorder
}

// Recorder for MockEthernetPacketManipulator (not exported)
type _MockEthernetPacketManipulatorRecorder struct {
	mock *MockEthernetPacketManipulator
}

func NewMockEthernetPacketManipulator(ctrl *gomock.Controller) *MockEthernetPacketManipulator {
	mock := &MockEthernetPacketManipulator{ctrl: ctrl}
	mock.recorder = &_MockEthernetPacketManipulatorRecorder{mock}
	return mock
}

func (_m *MockEthernetPacketManipulator) EXPECT() *_MockEthernetPacketManipulatorRecorder {
	return _m.recorder
}

func (_m *MockEthernetPacketManipulator) AddEthernetLayer(srcMACstr string, dstMACstr string) error {
	ret := _m.ctrl.Call(_m, "AddEthernetLayer", srcMACstr, dstMACstr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEthernetPacketManipulatorRecorder) AddEthernetLayer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddEthernetLayer", arg0, arg1)
}

func (_m *MockEthernetPacketManipulator) GetEthernetPacket() layers.Ethernet {
	ret := _m.ctrl.Call(_m, "GetEthernetPacket")
	ret0, _ := ret[0].(layers.Ethernet)
	return ret0
}

func (_mr *_MockEthernetPacketManipulatorRecorder) GetEthernetPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEthernetPacket")
}

// Mock of IPPacketManipulator interface
type MockIPPacketManipulator struct {
	ctrl     *gomock.Controller
	recorder *_MockIPPacketManipulatorRecorder
}

// Recorder for MockIPPacketManipulator (not exported)
type _MockIPPacketManipulatorRecorder struct {
	mock *MockIPPacketManipulator
}

func NewMockIPPacketManipulator(ctrl *gomock.Controller) *MockIPPacketManipulator {
	mock := &MockIPPacketManipulator{ctrl: ctrl}
	mock.recorder = &_MockIPPacketManipulatorRecorder{mock}
	return mock
}

func (_m *MockIPPacketManipulator) EXPECT() *_MockIPPacketManipulatorRecorder {
	return _m.recorder
}

func (_m *MockIPPacketManipulator) AddIPLayer(srcIPstr string, dstIPstr string) error {
	ret := _m.ctrl.Call(_m, "AddIPLayer", srcIPstr, dstIPstr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIPPacketManipulatorRecorder) AddIPLayer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddIPLayer", arg0, arg1)
}

func (_m *MockIPPacketManipulator) GetIPPacket() layers.IPv4 {
	ret := _m.ctrl.Call(_m, "GetIPPacket")
	ret0, _ := ret[0].(layers.IPv4)
	return ret0
}

func (_mr *_MockIPPacketManipulatorRecorder) GetIPPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIPPacket")
}

func (_m *MockIPPacketManipulator) GetIPChecksum() uint16 {
	ret := _m.ctrl.Call(_m, "GetIPChecksum")
	ret0, _ := ret[0].(uint16)
	return ret0
}

func (_mr *_MockIPPacketManipulatorRecorder) GetIPChecksum() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIPChecksum")
}

// Mock of TCPPacketManipulator interface
type MockTCPPacketManipulator struct {
	ctrl     *gomock.Controller
	recorder *_MockTCPPacketManipulatorRecorder
}

// Recorder for MockTCPPacketManipulator (not exported)
type _MockTCPPacketManipulatorRecorder struct {
	mock *MockTCPPacketManipulator
}

func NewMockTCPPacketManipulator(ctrl *gomock.Controller) *MockTCPPacketManipulator {
	mock := &MockTCPPacketManipulator{ctrl: ctrl}
	mock.recorder = &_MockTCPPacketManipulatorRecorder{mock}
	return mock
}

func (_m *MockTCPPacketManipulator) EXPECT() *_MockTCPPacketManipulatorRecorder {
	return _m.recorder
}

func (_m *MockTCPPacketManipulator) AddTCPLayer(srcPort layers.TCPPort, dstPort layers.TCPPort) error {
	ret := _m.ctrl.Call(_m, "AddTCPLayer", srcPort, dstPort)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) AddTCPLayer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTCPLayer", arg0, arg1)
}

func (_m *MockTCPPacketManipulator) GetTCPPacket() layers.TCP {
	ret := _m.ctrl.Call(_m, "GetTCPPacket")
	ret0, _ := ret[0].(layers.TCP)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) GetTCPPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPPacket")
}

func (_m *MockTCPPacketManipulator) GetTCPSequenceNumber() uint32 {
	ret := _m.ctrl.Call(_m, "GetTCPSequenceNumber")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) GetTCPSequenceNumber() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPSequenceNumber")
}

func (_m *MockTCPPacketManipulator) GetTCPAcknowledgementNumber() uint32 {
	ret := _m.ctrl.Call(_m, "GetTCPAcknowledgementNumber")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) GetTCPAcknowledgementNumber() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPAcknowledgementNumber")
}

func (_m *MockTCPPacketManipulator) GetTCPWindow() uint16 {
	ret := _m.ctrl.Call(_m, "GetTCPWindow")
	ret0, _ := ret[0].(uint16)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) GetTCPWindow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPWindow")
}

func (_m *MockTCPPacketManipulator) GetTCPSyn() bool {
	ret := _m.ctrl.Call(_m, "GetTCPSyn")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) GetTCPSyn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPSyn")
}

func (_m *MockTCPPacketManipulator) GetTCPAck() bool {
	ret := _m.ctrl.Call(_m, "GetTCPAck")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) GetTCPAck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPAck")
}

func (_m *MockTCPPacketManipulator) GetTCPFin() bool {
	ret := _m.ctrl.Call(_m, "GetTCPFin")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) GetTCPFin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPFin")
}

func (_m *MockTCPPacketManipulator) GetTCPChecksum() uint16 {
	ret := _m.ctrl.Call(_m, "GetTCPChecksum")
	ret0, _ := ret[0].(uint16)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) GetTCPChecksum() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPChecksum")
}

func (_m *MockTCPPacketManipulator) SetTCPSequenceNumber(seqNum uint32) error {
	ret := _m.ctrl.Call(_m, "SetTCPSequenceNumber", seqNum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) SetTCPSequenceNumber(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPSequenceNumber", arg0)
}

func (_m *MockTCPPacketManipulator) SetTCPAcknowledgementNumber(ackNum uint32) error {
	ret := _m.ctrl.Call(_m, "SetTCPAcknowledgementNumber", ackNum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) SetTCPAcknowledgementNumber(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPAcknowledgementNumber", arg0)
}

func (_m *MockTCPPacketManipulator) SetTCPWindow(window uint16) error {
	ret := _m.ctrl.Call(_m, "SetTCPWindow", window)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) SetTCPWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPWindow", arg0)
}

func (_m *MockTCPPacketManipulator) SetTCPSyn() {
	_m.ctrl.Call(_m, "SetTCPSyn")
}

func (_mr *_MockTCPPacketManipulatorRecorder) SetTCPSyn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPSyn")
}

func (_m *MockTCPPacketManipulator) SetTCPSynAck() {
	_m.ctrl.Call(_m, "SetTCPSynAck")
}

func (_mr *_MockTCPPacketManipulatorRecorder) SetTCPSynAck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPSynAck")
}

func (_m *MockTCPPacketManipulator) SetTCPAck() {
	_m.ctrl.Call(_m, "SetTCPAck")
}

func (_mr *_MockTCPPacketManipulatorRecorder) SetTCPAck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPAck")
}

func (_m *MockTCPPacketManipulator) NewTCPPayload(newPayload string) error {
	ret := _m.ctrl.Call(_m, "NewTCPPayload", newPayload)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTCPPacketManipulatorRecorder) NewTCPPayload(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewTCPPayload", arg0)
}

// Mock of PacketHelper interface
type MockPacketHelper struct {
	ctrl     *gomock.Controller
	recorder *_MockPacketHelperRecorder
}

// Recorder for MockPacketHelper (not exported)
type _MockPacketHelperRecorder struct {
	mock *MockPacketHelper
}

func NewMockPacketHelper(ctrl *gomock.Controller) *MockPacketHelper {
	mock := &MockPacketHelper{ctrl: ctrl}
	mock.recorder = &_MockPacketHelperRecorder{mock}
	return mock
}

func (_m *MockPacketHelper) EXPECT() *_MockPacketHelperRecorder {
	return _m.recorder
}

func (_m *MockPacketHelper) ToBytes() []byte {
	ret := _m.ctrl.Call(_m, "ToBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockPacketHelperRecorder) ToBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ToBytes")
}

func (_m *MockPacketHelper) AddPacket(packet gopacket.Packet) {
	_m.ctrl.Call(_m, "AddPacket", packet)
}

func (_mr *_MockPacketHelperRecorder) AddPacket(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddPacket", arg0)
}

func (_m *MockPacketHelper) DecodePacket() PacketManipulator {
	ret := _m.ctrl.Call(_m, "DecodePacket")
	ret0, _ := ret[0].(PacketManipulator)
	return ret0
}

func (_mr *_MockPacketHelperRecorder) DecodePacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecodePacket")
}

// Mock of PacketManipulator interface
type MockPacketManipulator struct {
	ctrl     *gomock.Controller
	recorder *_MockPacketManipulatorRecorder
}

// Recorder for MockPacketManipulator (not exported)
type _MockPacketManipulatorRecorder struct {
	mock *MockPacketManipulator
}

func NewMockPacketManipulator(ctrl *gomock.Controller) *MockPacketManipulator {
	mock := &MockPacketManipulator{ctrl: ctrl}
	mock.recorder = &_MockPacketManipulatorRecorder{mock}
	return mock
}

func (_m *MockPacketManipulator) EXPECT() *_MockPacketManipulatorRecorder {
	return _m.recorder
}

func (_m *MockPacketManipulator) AddEthernetLayer(srcMACstr string, dstMACstr string) error {
	ret := _m.ctrl.Call(_m, "AddEthernetLayer", srcMACstr, dstMACstr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) AddEthernetLayer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddEthernetLayer", arg0, arg1)
}

func (_m *MockPacketManipulator) GetEthernetPacket() layers.Ethernet {
	ret := _m.ctrl.Call(_m, "GetEthernetPacket")
	ret0, _ := ret[0].(layers.Ethernet)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetEthernetPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEthernetPacket")
}

func (_m *MockPacketManipulator) AddIPLayer(srcIPstr string, dstIPstr string) error {
	ret := _m.ctrl.Call(_m, "AddIPLayer", srcIPstr, dstIPstr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) AddIPLayer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddIPLayer", arg0, arg1)
}

func (_m *MockPacketManipulator) GetIPPacket() layers.IPv4 {
	ret := _m.ctrl.Call(_m, "GetIPPacket")
	ret0, _ := ret[0].(layers.IPv4)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetIPPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIPPacket")
}

func (_m *MockPacketManipulator) GetIPChecksum() uint16 {
	ret := _m.ctrl.Call(_m, "GetIPChecksum")
	ret0, _ := ret[0].(uint16)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetIPChecksum() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIPChecksum")
}

func (_m *MockPacketManipulator) AddTCPLayer(srcPort layers.TCPPort, dstPort layers.TCPPort) error {
	ret := _m.ctrl.Call(_m, "AddTCPLayer", srcPort, dstPort)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) AddTCPLayer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTCPLayer", arg0, arg1)
}

func (_m *MockPacketManipulator) GetTCPPacket() layers.TCP {
	ret := _m.ctrl.Call(_m, "GetTCPPacket")
	ret0, _ := ret[0].(layers.TCP)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetTCPPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPPacket")
}

func (_m *MockPacketManipulator) GetTCPSequenceNumber() uint32 {
	ret := _m.ctrl.Call(_m, "GetTCPSequenceNumber")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetTCPSequenceNumber() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPSequenceNumber")
}

func (_m *MockPacketManipulator) GetTCPAcknowledgementNumber() uint32 {
	ret := _m.ctrl.Call(_m, "GetTCPAcknowledgementNumber")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetTCPAcknowledgementNumber() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPAcknowledgementNumber")
}

func (_m *MockPacketManipulator) GetTCPWindow() uint16 {
	ret := _m.ctrl.Call(_m, "GetTCPWindow")
	ret0, _ := ret[0].(uint16)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetTCPWindow() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPWindow")
}

func (_m *MockPacketManipulator) GetTCPSyn() bool {
	ret := _m.ctrl.Call(_m, "GetTCPSyn")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetTCPSyn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPSyn")
}

func (_m *MockPacketManipulator) GetTCPAck() bool {
	ret := _m.ctrl.Call(_m, "GetTCPAck")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetTCPAck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPAck")
}

func (_m *MockPacketManipulator) GetTCPFin() bool {
	ret := _m.ctrl.Call(_m, "GetTCPFin")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetTCPFin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPFin")
}

func (_m *MockPacketManipulator) GetTCPChecksum() uint16 {
	ret := _m.ctrl.Call(_m, "GetTCPChecksum")
	ret0, _ := ret[0].(uint16)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) GetTCPChecksum() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTCPChecksum")
}

func (_m *MockPacketManipulator) SetTCPSequenceNumber(seqNum uint32) error {
	ret := _m.ctrl.Call(_m, "SetTCPSequenceNumber", seqNum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) SetTCPSequenceNumber(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPSequenceNumber", arg0)
}

func (_m *MockPacketManipulator) SetTCPAcknowledgementNumber(ackNum uint32) error {
	ret := _m.ctrl.Call(_m, "SetTCPAcknowledgementNumber", ackNum)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) SetTCPAcknowledgementNumber(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPAcknowledgementNumber", arg0)
}

func (_m *MockPacketManipulator) SetTCPWindow(window uint16) error {
	ret := _m.ctrl.Call(_m, "SetTCPWindow", window)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) SetTCPWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPWindow", arg0)
}

func (_m *MockPacketManipulator) SetTCPSyn() {
	_m.ctrl.Call(_m, "SetTCPSyn")
}

func (_mr *_MockPacketManipulatorRecorder) SetTCPSyn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPSyn")
}

func (_m *MockPacketManipulator) SetTCPSynAck() {
	_m.ctrl.Call(_m, "SetTCPSynAck")
}

func (_mr *_MockPacketManipulatorRecorder) SetTCPSynAck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPSynAck")
}

func (_m *MockPacketManipulator) SetTCPAck() {
	_m.ctrl.Call(_m, "SetTCPAck")
}

func (_mr *_MockPacketManipulatorRecorder) SetTCPAck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTCPAck")
}

func (_m *MockPacketManipulator) NewTCPPayload(newPayload string) error {
	ret := _m.ctrl.Call(_m, "NewTCPPayload", newPayload)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) NewTCPPayload(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewTCPPayload", arg0)
}

func (_m *MockPacketManipulator) ToBytes() []byte {
	ret := _m.ctrl.Call(_m, "ToBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) ToBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ToBytes")
}

func (_m *MockPacketManipulator) AddPacket(packet gopacket.Packet) {
	_m.ctrl.Call(_m, "AddPacket", packet)
}

func (_mr *_MockPacketManipulatorRecorder) AddPacket(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddPacket", arg0)
}

func (_m *MockPacketManipulator) DecodePacket() PacketManipulator {
	ret := _m.ctrl.Call(_m, "DecodePacket")
	ret0, _ := ret[0].(PacketManipulator)
	return ret0
}

func (_mr *_MockPacketManipulatorRecorder) DecodePacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecodePacket")
}

// Mock of PacketFlowManipulator interface
type MockPacketFlowManipulator struct {
	ctrl     *gomock.Controller
	recorder *_MockPacketFlowManipulatorRecorder
}

// Recorder for MockPacketFlowManipulator (not exported)
type _MockPacketFlowManipulatorRecorder struct {
	mock *MockPacketFlowManipulator
}

func NewMockPacketFlowManipulator(ctrl *gomock.Controller) *MockPacketFlowManipulator {
	mock := &MockPacketFlowManipulator{ctrl: ctrl}
	mock.recorder = &_MockPacketFlowManipulatorRecorder{mock}
	return mock
}

func (_m *MockPacketFlowManipulator) EXPECT() *_MockPacketFlowManipulatorRecorder {
	return _m.recorder
}

func (_m *MockPacketFlowManipulator) GenerateTCPFlow(pt PacketFlowType) PacketFlowManipulator {
	ret := _m.ctrl.Call(_m, "GenerateTCPFlow", pt)
	ret0, _ := ret[0].(PacketFlowManipulator)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GenerateTCPFlow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GenerateTCPFlow", arg0)
}

func (_m *MockPacketFlowManipulator) GetFirstSynPacket() PacketManipulator {
	ret := _m.ctrl.Call(_m, "GetFirstSynPacket")
	ret0, _ := ret[0].(PacketManipulator)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GetFirstSynPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFirstSynPacket")
}

func (_m *MockPacketFlowManipulator) GetFirstSynAckPacket() PacketManipulator {
	ret := _m.ctrl.Call(_m, "GetFirstSynAckPacket")
	ret0, _ := ret[0].(PacketManipulator)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GetFirstSynAckPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFirstSynAckPacket")
}

func (_m *MockPacketFlowManipulator) GetFirstAckPacket() PacketManipulator {
	ret := _m.ctrl.Call(_m, "GetFirstAckPacket")
	ret0, _ := ret[0].(PacketManipulator)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GetFirstAckPacket() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFirstAckPacket")
}

func (_m *MockPacketFlowManipulator) GetSynPackets() PacketFlowManipulator {
	ret := _m.ctrl.Call(_m, "GetSynPackets")
	ret0, _ := ret[0].(PacketFlowManipulator)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GetSynPackets() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSynPackets")
}

func (_m *MockPacketFlowManipulator) GetSynAckPackets() PacketFlowManipulator {
	ret := _m.ctrl.Call(_m, "GetSynAckPackets")
	ret0, _ := ret[0].(PacketFlowManipulator)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GetSynAckPackets() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSynAckPackets")
}

func (_m *MockPacketFlowManipulator) GetAckPackets() PacketFlowManipulator {
	ret := _m.ctrl.Call(_m, "GetAckPackets")
	ret0, _ := ret[0].(PacketFlowManipulator)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GetAckPackets() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAckPackets")
}

func (_m *MockPacketFlowManipulator) GetNthPacket(index int) PacketManipulator {
	ret := _m.ctrl.Call(_m, "GetNthPacket", index)
	ret0, _ := ret[0].(PacketManipulator)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GetNthPacket(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNthPacket", arg0)
}

func (_m *MockPacketFlowManipulator) GetNumPackets() int {
	ret := _m.ctrl.Call(_m, "GetNumPackets")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) GetNumPackets() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNumPackets")
}

func (_m *MockPacketFlowManipulator) AppendPacket(p PacketManipulator) int {
	ret := _m.ctrl.Call(_m, "AppendPacket", p)
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPacketFlowManipulatorRecorder) AppendPacket(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AppendPacket", arg0)
}
